<div class="header-main">
  <h1>PICBOX</h1>
  <h2>Automatically save photos and videos you liked on Instagram to your Dropbox</h4>
  <h3>Just link your Instagram and Dropbox accounts, and use Instagram app as you always do. Your likes will be downloaded to your Dropbox folder.</h5>
</div>
<div class="container" style="margin-top: 30px;">
  <div class="row register">
    <div class="col-md-6 col-md-offset-3 text-center">
      <a class="btn btn-success btn-lg" href="/join" target="_self" style="font-size: 27px;">Get Started</a>
    </div>
  </div>
  <div class="row login">
    <div class="col-md-6 col-md-offset-3 text-center">
      or if you already have registered, <a href="/login" target="_self">login here.</a>
    </div>
  </div>
  <div class="row counter">
    <div class="col-md-6 col-md-offset-3 text-center">
      <div class="number" style="font-size: 50px; font-weight: 300;">0</div>
      likes have been synced so far!
    </div>
  </div>
  <div class="row contact">
    <div class="col-md-6 col-md-offset-3 text-center">
      <a class="btn btn-social btn-twitter" href="https://twitter.com/usepicbox" target="_blank"><i class="fa fa-twitter"></i>@usepicbox</a><br><br>
      You can follow us on Twitter or you can always say hello to us from <a href="mailto:hello@picbox.io">hello@picbox.io</a><br>
    </div>
  </div>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<script>
(function($) {
    $.fn.countTo = function(options) {
        // merge the default plugin settings with the custom options
        options = $.extend({}, $.fn.countTo.defaults, options || {});

        // how many times to update the value, and how much to increment the value on each update
        var loops = Math.ceil(options.speed / options.refreshInterval),
            increment = (options.to - options.from) / loops;

        return $(this).each(function() {
            var _this = this,
                loopCount = 0,
                value = options.from,
                interval = setInterval(updateTimer, options.refreshInterval);

            function updateTimer() {
                value += increment;
                loopCount++;
                $(_this).html(value.toFixed(options.decimals));

                if (typeof(options.onUpdate) == 'function') {
                    options.onUpdate.call(_this, value);
                }

                if (loopCount >= loops) {
                    clearInterval(interval);
                    value = options.to;

                    if (typeof(options.onComplete) == 'function') {
                        options.onComplete.call(_this, value);
                    }
                }
            }
        });
    };

    $.fn.countTo.defaults = {
        from: 0,  // the number the element should start at
        to: 100,  // the number the element should end at
        speed: 1000,  // how long it should take to count between the target numbers
        refreshInterval: 100,  // how often the element should be updated
        decimals: 0,  // the number of decimal places to show
        onUpdate: null,  // callback method for every time the element is updated,
        onComplete: null,  // callback method for when the element finishes updating
    };
})(jQuery);

</script>
<script src="/socket.io/socket.io.js"></script>
<script>
  var socket = io();
  var current = 0;
  socket.on('up', function(newCounter){
    var elem = document.querySelector('.counter .number');
    jQuery(function($) {
        $(elem).countTo({
            from: current,
            to: newCounter,
            speed: 100,
            refreshInterval: 1,
            onComplete: function(value) {
                console.debug(this);
            }
        });
    });
  });
</script>
